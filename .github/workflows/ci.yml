# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.branch-name.outputs.current_branch }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a test script 
        run: |
          echo "It works..."

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v6

  deploy:
    runs-on: ubuntu-latest
    needs: [ build ]  
    # permissions:
    #   deployments: write
    environment: dev-${{ needs.build.outputs.branch-name }}
    steps:

      # - id: prepare-environment
      #   run: |
      #     if [[ ${{ github.event_name }} == "pull_request" ]]; then
      #       echo 'name=dev-${{github.event.pull_request.number}}' >> $GITHUB_OUTPUT
      #       echo 'transient=true'  >> $GITHUB_OUTPUT
      #     else
      #       echo 'name=production' >> $GITHUB_OUTPUT
      #       echo 'transient=false'  >> $GITHUB_OUTPUT
      #     fi
      # - uses: chrnorm/deployment-action@v2
      #   name: Create GitHub deployment
      #   id: deployment
      #   with:
      #     token: '${{ github.token }}'
      #     environment-url: http://my-app-url.com
      #     environment: ${{ steps.prepare-environment.outputs.name }}
      #     transient-environment: ${{ steps.prepare-environment.outputs.transient }}
      #     #production-environment: true

      - name: Deploy my app
        run: |
          echo it works

      # - name: Update deployment status (success)
      #   if: success()
      #   uses: chrnorm/deployment-status@v2
      #   with:
      #     token: '${{ github.token }}'
      #     environment-url: ${{ steps.deployment.outputs.environment_url }}
      #     deployment-id: ${{ steps.deployment.outputs.deployment_id }}
      #     state: 'success'
      #     description: Lets see where it shows

      # - name: Update deployment status (failure)
      #   if: failure()
      #   uses: chrnorm/deployment-status@v2
      #   with:
      #     token: '${{ github.token }}'
      #     environment-url: ${{ steps.deployment.outputs.environment_url }}
      #     deployment-id: ${{ steps.deployment.outputs.deployment_id }}
      #     state: 'failure'
